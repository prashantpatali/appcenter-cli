/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Class representing a Destination.
 */
class Destination {
  /**
   * Create a Destination.
   * @property {boolean} [isLatest] Is the containing release the latest one in
   * this distribution group.
   * @property {string} [type] type of the distribution store currently stores
   * type can be intune, googleplay or windows. Possible values include:
   * 'intune', 'googleplay', 'windows'
   * @property {string} [publishingStatus] publishing status of the release in
   * the store.
   * @property {string} [name] Name of a distribution group / distribution
   * store. The release will be associated with this distribution group or
   * store. If the distribution group / store doesn't exist a 400 is returned.
   * If both distribution group / store name and id are passed, the id is
   * taking precedence.
   * @property {string} [id] Id of a distribution group / store. The release
   * will be associated with this distribution group / store. If the
   * distribution group / store doesn't exist a 400 is returned. If both
   * distribution group / store name and id are passed, the id is taking
   * precedence.
   * @property {string} [destinationType] Destination can be either store or
   * group. Possible values include: 'group', 'store', 'tester'
   */
  constructor() {
  }

  /**
   * Defines the metadata of Destination
   *
   * @returns {object} metadata of Destination
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Destination',
      type: {
        name: 'Composite',
        className: 'Destination',
        modelProperties: {
          isLatest: {
            required: false,
            serializedName: 'is_latest',
            type: {
              name: 'Boolean'
            }
          },
          type: {
            required: false,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          publishingStatus: {
            required: false,
            serializedName: 'publishing_status',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          destinationType: {
            required: false,
            serializedName: 'destination_type',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = Destination;
